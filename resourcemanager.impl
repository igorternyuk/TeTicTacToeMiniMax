template<class Resource, class Identifier>
void ResourceManager<Resource, Identifier>::load(Identifier id,
                                                         const std::string &fileName)
{
    // Create and load resource
    std::unique_ptr<Resource> resource{std::make_unique<Resource>()};
    if(!resource->loadFromFile(fileName))
    {
        throw std::runtime_error("TextureHolder::load - Failed to load " + fileName);
    }
    // If loading successful, insert resource to map
    insertResource(id, resource);
}

template<class Resource, class Identifier, class Parameter>
void load(Identifier id, const std::string &fileName, const Parameter &parameter)
{
    // Create and load resource
    std::unique_ptr<Resource> resource{std::make_unique<Resource>()};
    if(!resource->loadFromFile(fileName, parameter))
    {
        throw std::runtime_error("TextureHolder::load - Failed to load " + fileName);
    }
    // If loading successful, insert resource to map
    insertResource(id, resource);
}

template<class Resource, class Identifier>
Resource& ResourceManager<Resource, Identifier>::get(Identifier id)
{
    auto found = mResourceMap.find(id);
    assert(found != mResourceMap.end());
    return *found->second;
}

template<class Resource, class Identifier>
const Resource& ResourceManager<Resource, Identifier>::get(Identifier id) const
{
    auto found = mResourceMap.find(id);
    assert(found != mResourceMap.end());
    return *found->second;
}

template<class Resource, class Identifier>
void ResourceManager<Resource, Identifier>::insertResource(Identifier id,
                                                           std::unique_ptr<Resource> &resource)
{
    auto inserted = mResourceMap.insert(std::make_pair(id, std::move(resource)));
    assert(inserted.second); //Logic error
}
